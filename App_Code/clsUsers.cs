//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


    using System;
    using System.Text;
    using System.Data;
    using System.Data.SqlClient;
    using System.Configuration;
    using System.Linq;
    
    
    public class clsusers {


       

        public static void Insert(Users users) {
        //    SqlConnection conn;
        //    conn = new System.Data.SqlClient.SqlConnection(ConfigurationManager.ConnectionStrings["terrible1ConnectionString"].ConnectionString);
        //    SqlDataAdapter adapt;
        //    adapt = new System.Data.SqlClient.SqlDataAdapter("select * from Users", conn);
        //    conn.Open();
        //    System.Data.DataTable tbUsers;
        //    tbUsers = new System.Data.DataTable("Users");
        //    adapt.Fill(tbUsers);
        //    SqlCommandBuilder mybuild;
        //    mybuild = new System.Data.SqlClient.SqlCommandBuilder(adapt);
        ////    adapt.UpdateCommand = mybuild.GetUpdateCommand();
        //    adapt.InsertCommand = mybuild.GetInsertCommand();
            
        //        System.Data.DataRow rowUsers;
        //        rowUsers = tbUsers.NewRow();
        //       // rowUsers["UserID"] = users.UserID;
        //        rowUsers["UserName"] = users.UserName;
        //        rowUsers["Password"] = users.Password;
        //        rowUsers["FirstName"] = users.FirstName;
        //        rowUsers["LastName"] = users.LastName;
        //        rowUsers["RoleID"] = users.RoleID;
        //        rowUsers["CompanyID"] = users.CompanyID;
        //        rowUsers["Email"] = users.Email;
              
        //        tbUsers.Rows.Add(rowUsers);
        //        adapt.Update(tbUsers);

            bool result = false;
            SqlHelper _helper;
            _helper = new SqlHelper();
            try
            {

                if (_helper.CreateConnection())
                {
                    _helper.BeginTransaction();
                    _helper.CreateCommand("sp_Users_Insert", true);
                    //_helper.AddParameter("@ID", DbType.Int32, ParameterDirection.Output);
                    _helper.AddParameter("@UserName",  users.UserName, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@Password", users.Password, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@FirstName", users.FirstName, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@LastName", users.LastName, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@CompanyID", users.CompanyID, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@Email", users.Email, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@Role", users.Role, DbType.Int32, ParameterDirection.Input);
                    _helper.AddParameter("@RoleID", users.RoleID, DbType.String, ParameterDirection.Input);


                    result = _helper.ExecuteNonQuery();
                    //this.ID = Convert.ToInt32(_helper.Command.Parameters["@ID"].Value);
                    _helper.ClearCommandParameters();

                    if (result)
                    {
                        _helper.CommitTransaction();

                    }


                }

            }
            catch (Exception ex)
            {

                _helper.RollbackTransaction();
                ErrorHandler.Handle(ex);


            }
            finally
            {
                _helper.CloseConnection();

            }

 
        }
        public static void InsertwithDeck(Users users, int deckid)
        {
            
            //        adapt.Update(tbUsers);

            bool result = false;
            SqlHelper _helper;
            _helper = new SqlHelper();
            try
            {

                if (_helper.CreateConnection())
                {
                    _helper.BeginTransaction();
                    _helper.CreateCommand("sp_UsersDeck_Insert", true); 
                    _helper.AddParameter("@UserName", users.UserName, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@Password", users.Password, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@FirstName", users.FirstName, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@LastName", users.LastName, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@CompanyID", users.CompanyID, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@Email", users.Email, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@Role", users.Role, DbType.Int32, ParameterDirection.Input);
                    _helper.AddParameter("@RoleID", users.RoleID, DbType.String, ParameterDirection.Input);
                    _helper.AddParameter("@DeckID", deckid, DbType.Int32, ParameterDirection.Input);


                    result = _helper.ExecuteNonQuery();
                    //this.ID = Convert.ToInt32(_helper.Command.Parameters["@ID"].Value);
                    _helper.ClearCommandParameters();

                    if (result)
                    {
                        _helper.CommitTransaction();

                    }


                }

            }
            catch (Exception ex)
            {

                _helper.RollbackTransaction();
                ErrorHandler.Handle(ex);


            }
            finally
            {
                _helper.CloseConnection();

            }


        }
        public static void InsertClient(Users users)
        {
            SqlConnection conn;
            conn = new System.Data.SqlClient.SqlConnection(ConfigurationManager.ConnectionStrings["terrible1ConnectionString"].ConnectionString);
            SqlDataAdapter adapt;
            adapt = new System.Data.SqlClient.SqlDataAdapter("select * from Users", conn);
            conn.Open();
            System.Data.DataTable tbUsers;
            tbUsers = new System.Data.DataTable("Users");
            adapt.Fill(tbUsers);
            SqlCommandBuilder mybuild;
            mybuild = new System.Data.SqlClient.SqlCommandBuilder(adapt);
            //    adapt.UpdateCommand = mybuild.GetUpdateCommand();
            adapt.InsertCommand = mybuild.GetInsertCommand();

            System.Data.DataRow rowUsers;
            rowUsers = tbUsers.NewRow();
            // rowUsers["UserID"] = users.UserID;
            rowUsers["UserName"] = users.UserName;
            rowUsers["Password"] = users.Password;
            rowUsers["FirstName"] = users.FirstName;
            rowUsers["LastName"] = users.LastName;
            rowUsers["RoleID"] = users.RoleID;
            rowUsers["CompanyID"] = users.CompanyID;
            rowUsers["ClientID"] = users.ClientID;
            rowUsers["Email"] = users.Email;
            rowUsers["Role"] = users.Role;
            tbUsers.Rows.Add(rowUsers);
            adapt.Update(tbUsers);

        }
        public static void Update(Users users)
        {
            SqlConnection conn;
            conn = new System.Data.SqlClient.SqlConnection(ConfigurationManager.ConnectionStrings["terrible1ConnectionString"].ConnectionString);
            SqlDataAdapter adapt;
            adapt = new System.Data.SqlClient.SqlDataAdapter("select * from Users where  UserID = " + users.UserID + "", conn);
            conn.Open();
            System.Data.DataTable tbUsers;
            tbUsers = new System.Data.DataTable("Users");
            adapt.Fill(tbUsers);
            SqlCommandBuilder mybuild;
            mybuild = new System.Data.SqlClient.SqlCommandBuilder(adapt);
            adapt.UpdateCommand = mybuild.GetUpdateCommand();
            adapt.InsertCommand = mybuild.GetInsertCommand();
         
                // Edit methods
                System.Data.DataRow rowUsers;
                rowUsers = tbUsers.Rows[0];            

                rowUsers["UserName"] = users.UserName;
                rowUsers["Password"] = users.Password;
                rowUsers["FirstName"] = users.FirstName;
                rowUsers["LastName"] = users.LastName;
                rowUsers["RoleID"] = users.RoleID;
                rowUsers["CompanyID"] = users.CompanyID;
                adapt.Update(tbUsers);
           
        }
        
        //public static Users getUsers(Int32 UsersID)
        //{
        //    SqlConnection conn;
        //    conn = new System.Data.SqlClient.SqlConnection(ConfigurationManager.ConnectionStrings["terrible1ConnectionString"].ConnectionString);
        //    SqlDataAdapter adapt;
        //    adapt = new System.Data.SqlClient.SqlDataAdapter("select * from Users where UserID = " + UsersID + "", conn);
            
        //    conn.Open();
        //    System.Data.DataTable tbUsers;
        //    tbUsers = new System.Data.DataTable("Users");
        //    adapt.Fill(tbUsers);
        //    Users Users;

        //    Users = new Users();

        //    if (tbUsers.Rows.Count > 0) {
        //        System.Data.DataRow rowUsers;
        //        rowUsers = tbUsers.Rows[0];
        //        Users.UserID = System.Convert.ToInt32(rowUsers["UserID"]);
        //        Users.UserName = System.Convert.ToString(rowUsers["UserName"]);
        //        Users.Password = System.Convert.ToString(rowUsers["Password"]);
        //        Users.FirstName = System.Convert.ToString(rowUsers["FirstName"]);
        //        Users.LastName = System.Convert.ToString(rowUsers["LastName"]);
        //        Users.RoleID = System.Convert.ToInt32(rowUsers["RoleID"]);
        //        return Users;
        //    }
        //    else {
        //        return null;
        //    }
        //}
        public static Users getUsers(Int32 UserID)
        {
            SqlConnection conn;
            conn = new System.Data.SqlClient.SqlConnection(ConfigurationManager.ConnectionStrings["terrible1ConnectionString"].ConnectionString);
            SqlDataAdapter adapt;
            adapt = new System.Data.SqlClient.SqlDataAdapter("select * from Users where  UserID = " + UserID + "", conn);
            conn.Open();
            System.Data.DataTable tbUsers;
            tbUsers = new System.Data.DataTable("Users");
            adapt.Fill(tbUsers);
            Users Users;
            Users = new Users();
            if (tbUsers.Rows.Count > 0)
            {
                System.Data.DataRow rowUsers;
                rowUsers = tbUsers.Rows[0];
                Users.UserID = 1;//System.Convert.ToInt32(rowUsers["UserID"]);
                //Users.UserName = System.Convert.ToString(rowUsers["UserName"]);
                //Users.Password = System.Convert.ToString(rowUsers["Password"]);
                //Users.FirstName = System.Convert.ToString(rowUsers["FirstName"]);
                //Users.LastName = System.Convert.ToString(rowUsers["LastName"]);
                //Users.RoleID = System.Convert.ToInt32(rowUsers["RoleID"]);
                return Users;
            }
            else
            {
                return null;
            }
        }

        public static string GetContentEditor(int deckID)
        {
            SqlHelper _helper = new SqlHelper();
            string username = String.Empty;
            DataTable dt = new DataTable();


            _helper.CloseConnection();
            _helper.CreateCommand("sp_UsersSelectByDeck", false);
            _helper.AddParameter("@DeckID", deckID, DbType.Int32, ParameterDirection.Input);
            _helper.ExecuteDataTable();
            dt = _helper.DataTable;

            _helper.CloseConnection();



            if (dt.Rows.Count > 0)
            {
                username = dt.Rows[0]["UserName"].ToString();
            }
            return username;
        }
        public static string GetDeckByUsername(string username )
        {
            SqlHelper _helper = new SqlHelper();
        
            DataTable dt = new DataTable();

            string param = "PresentationID=0&ClientID=0";
            _helper.CloseConnection();
            _helper.CreateCommand("sp_Select_UsersContentEditorByUsername", false);
            _helper.AddParameter("@UserName", username, DbType.String, ParameterDirection.Input);
            _helper.ExecuteDataTable();
            dt = _helper.DataTable;

            _helper.CloseConnection();



            if (dt.Rows.Count > 0)
            {
                param  = "PresentationID=" + dt.Rows[0]["PresentationID"].ToString();
                param  += "&ClientID=" + dt.Rows[0]["ClientID"].ToString();
            }
            return param;
        }
    }

